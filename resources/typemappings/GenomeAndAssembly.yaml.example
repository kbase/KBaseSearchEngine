# This is an example file that demonstrates how to specify "storage-to-search" type mappings beyond
# those embedded in the type transformation files (in the storage-type and storage-object-type
# parameters). Here, "storage" implies the data source storage system (mongodb for example) and "search"
# implies the data destination storage system, which happens to be ElasticSearch for this application.

# Type mappings specified in a mappings file override any equivalent mappings in the search type
# spec files (search type spec files are maintained in the types dir). If no type mappings exist for a spec
# file, then the latest version of the parsing rules embedded in the spec file is used.

# Type mappings can be split or combined among files as desired, except that only one storage
# type can be specified per mapping file.

# Currently only YAML-compatible files are supported for type mappings.

# Specify the storage type (e.g. the source of the data)
storage-type: WS

# Specify the types included in this mapping file. The search types given must match with
# the global-object-type key in the type spec file.
types:
    # A simple mapping that is a map from the storage object type to the search type(s).
    # Here, KBaseGenomeAnnotations.Assembly is the storage object type that maps to two
    # search types - Assembly using version 1 of the search type spec's indexing rules and
    # AssemblyContig using version 2 of the search type spec's indexing rules. Note that a type
    # spec may define many versions of indexing rules.
    KBaseGenomeAnnotations.Assembly:
        # if types is present any other fields are ignored.
        types:
            -
                type: Assembly
                version: 1
            -
                type: AssemblyContig
                version: 2

    # A more complex mapping that takes versions of the storage object type into account.
    KBaseGenome.Genome:
        # Specify the default search type(s) to use if a specific version of the storage object
        # type does not match any of the specified versions, or is not provided in the mapping.
        # If a default is not specified, the object will not be indexed. Even with a default type,
        # objects may fail to index if the new object type version is not backwards compatible with
        # the default version.
        # Here, the search types Genome with version 3 of the type spec's indexing rules, and
        # GenomeFeature with version 2 of the  type spec's indexing rules serve as default mappings
        # to the KBaseGenome.Genome storage object type above.
        default:
           -
               type: Genome
               version: 3
           -
               type: GenomeFeature
               version: 2

        # The mapping file may also be used to map many specific versions of the storage object type to
        # many specific versions of search types (many-to-many mapping).
        versions:
            1:
                -
                    type: Genome
                    version: 1
                -
                    type: GenomeFeature
                    version: 1
            2:
                -
                    type: Genome
                    version: 1
            3:
                -
                    type: Genome
                    version: 2
                -
                    type: GenomeFeature
                    version: 2
            4:
                -
                    type: Genome
                    version: 3
                -
                    type: GenomeFeature
                    version: 2
