# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class KBaseSearchEngine(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def search_types(self, params, context=None):
        """
        Search for number of objects of each type matching constraints.
        :param params: instance of type "SearchTypesInput" (Input parameters
           for search_types method.) -> structure: parameter "match_filter"
           of type "MatchFilter" (Optional rules of defining constrains for
           object properties including values of keywords or metadata/system
           properties (like object name, creation time range) or full-text
           search in all properties. boolean exclude_subobjects - don't
           return any subobjects in the search results if true. Default
           false. list<string> source_tags - source tags are arbitrary
           strings applied to data at the data source (for example, the
           workspace service). The source_tags list may optionally be
           populated with a set of tags that will determine what data is
           returned in a search. By default, the list behaves as a whitelist
           and only data with at least one of the tags will be returned.
           source_tags_blacklist - if true, the source_tags list behaves as a
           blacklist and any data with at least one of the tags will be
           excluded from the search results. If missing or false, the default
           behavior is maintained.) -> structure: parameter
           "full_text_in_all" of String, parameter "object_name" of String,
           parameter "timestamp" of type "MatchValue" (Optional rules of
           defining constraints for values of particular term (keyword).
           Appropriate field depends on type of keyword. For instance in case
           of integer type 'int_value' should be used. In case of range
           constraint rather than single value 'min_*' and 'max_*' fields
           should be used. You may omit one of ends of range to achieve '<='
           or '>=' comparison. Ends are always included for range
           constraints.) -> structure: parameter "value" of String, parameter
           "int_value" of Long, parameter "double_value" of Double, parameter
           "bool_value" of type "boolean" (A boolean. 0 = false, other =
           true.), parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_date" of Long, parameter "max_date" of Long,
           parameter "min_double" of Double, parameter "max_double" of
           Double, parameter "exclude_subobjects" of type "boolean" (A
           boolean. 0 = false, other = true.), parameter "lookup_in_keys" of
           mapping from String to type "MatchValue" (Optional rules of
           defining constraints for values of particular term (keyword).
           Appropriate field depends on type of keyword. For instance in case
           of integer type 'int_value' should be used. In case of range
           constraint rather than single value 'min_*' and 'max_*' fields
           should be used. You may omit one of ends of range to achieve '<='
           or '>=' comparison. Ends are always included for range
           constraints.) -> structure: parameter "value" of String, parameter
           "int_value" of Long, parameter "double_value" of Double, parameter
           "bool_value" of type "boolean" (A boolean. 0 = false, other =
           true.), parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_date" of Long, parameter "max_date" of Long,
           parameter "min_double" of Double, parameter "max_double" of
           Double, parameter "source_tags" of list of String, parameter
           "source_tags_blacklist" of type "boolean" (A boolean. 0 = false,
           other = true.), parameter "access_filter" of type "AccessFilter"
           (Optional rules of access constraints. - with_private - include
           data found in workspaces not marked as public, default value is
           true, - with_public - include data found in public workspaces,
           default value is false, - with_all_history - include all versions
           (last one and all old versions) of objects matching constrains,
           default value is false.) -> structure: parameter "with_private" of
           type "boolean" (A boolean. 0 = false, other = true.), parameter
           "with_public" of type "boolean" (A boolean. 0 = false, other =
           true.), parameter "with_all_history" of type "boolean" (A boolean.
           0 = false, other = true.)
        :returns: instance of type "SearchTypesOutput" (Output results of
           search_types method.) -> structure: parameter "type_to_count" of
           mapping from String to Long, parameter "search_time" of Long
        """
        return self._client.call_method(
            'KBaseSearchEngine.search_types',
            [params], self._service_ver, context)

    def search_objects(self, params, context=None):
        """
        Search for objects of particular type matching constraints.
        :param params: instance of type "SearchObjectsInput" (Input
           parameters for 'search_objects' method. object_types - list of the
           types of objects to search on (optional). The function will search
           on all objects if the list is not specified or is empty. The list
           size must be less than 50. match_filter - see MatchFilter.
           sorting_rules - see SortingRule (optional). access_filter - see
           AccessFilter. pagination - see Pagination (optional).
           post_processing - see PostProcessing (optional).) -> structure:
           parameter "object_types" of list of String, parameter
           "match_filter" of type "MatchFilter" (Optional rules of defining
           constrains for object properties including values of keywords or
           metadata/system properties (like object name, creation time range)
           or full-text search in all properties. boolean exclude_subobjects
           - don't return any subobjects in the search results if true.
           Default false. list<string> source_tags - source tags are
           arbitrary strings applied to data at the data source (for example,
           the workspace service). The source_tags list may optionally be
           populated with a set of tags that will determine what data is
           returned in a search. By default, the list behaves as a whitelist
           and only data with at least one of the tags will be returned.
           source_tags_blacklist - if true, the source_tags list behaves as a
           blacklist and any data with at least one of the tags will be
           excluded from the search results. If missing or false, the default
           behavior is maintained.) -> structure: parameter
           "full_text_in_all" of String, parameter "object_name" of String,
           parameter "timestamp" of type "MatchValue" (Optional rules of
           defining constraints for values of particular term (keyword).
           Appropriate field depends on type of keyword. For instance in case
           of integer type 'int_value' should be used. In case of range
           constraint rather than single value 'min_*' and 'max_*' fields
           should be used. You may omit one of ends of range to achieve '<='
           or '>=' comparison. Ends are always included for range
           constraints.) -> structure: parameter "value" of String, parameter
           "int_value" of Long, parameter "double_value" of Double, parameter
           "bool_value" of type "boolean" (A boolean. 0 = false, other =
           true.), parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_date" of Long, parameter "max_date" of Long,
           parameter "min_double" of Double, parameter "max_double" of
           Double, parameter "exclude_subobjects" of type "boolean" (A
           boolean. 0 = false, other = true.), parameter "lookup_in_keys" of
           mapping from String to type "MatchValue" (Optional rules of
           defining constraints for values of particular term (keyword).
           Appropriate field depends on type of keyword. For instance in case
           of integer type 'int_value' should be used. In case of range
           constraint rather than single value 'min_*' and 'max_*' fields
           should be used. You may omit one of ends of range to achieve '<='
           or '>=' comparison. Ends are always included for range
           constraints.) -> structure: parameter "value" of String, parameter
           "int_value" of Long, parameter "double_value" of Double, parameter
           "bool_value" of type "boolean" (A boolean. 0 = false, other =
           true.), parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_date" of Long, parameter "max_date" of Long,
           parameter "min_double" of Double, parameter "max_double" of
           Double, parameter "source_tags" of list of String, parameter
           "source_tags_blacklist" of type "boolean" (A boolean. 0 = false,
           other = true.), parameter "sorting_rules" of list of type
           "SortingRule" (Rule for sorting results. string property - the
           property to sort on. This may be a an object property - e.g. a
           field inside the object - or a standard property possessed by all
           objects, like a timestamp or creator. boolean is_object_property -
           true (the default) to specify an object property, false to specify
           a standard property. boolean ascending - true (the default) to
           sort ascending, false to sort descending.) -> structure: parameter
           "property" of String, parameter "is_object_property" of type
           "boolean" (A boolean. 0 = false, other = true.), parameter
           "ascending" of type "boolean" (A boolean. 0 = false, other =
           true.), parameter "access_filter" of type "AccessFilter" (Optional
           rules of access constraints. - with_private - include data found
           in workspaces not marked as public, default value is true, -
           with_public - include data found in public workspaces, default
           value is false, - with_all_history - include all versions (last
           one and all old versions) of objects matching constrains, default
           value is false.) -> structure: parameter "with_private" of type
           "boolean" (A boolean. 0 = false, other = true.), parameter
           "with_public" of type "boolean" (A boolean. 0 = false, other =
           true.), parameter "with_all_history" of type "boolean" (A boolean.
           0 = false, other = true.), parameter "pagination" of type
           "Pagination" (Pagination rules. Default values are: start = 0,
           count = 50.) -> structure: parameter "start" of Long, parameter
           "count" of Long, parameter "post_processing" of type
           "PostProcessing" (Rules for what to return about found objects.
           skip_keys - do not include keyword values for object ('key_props'
           field in ObjectData structure), skip_data - do not include raw
           data for object ('data' and 'parent_data' fields in ObjectData
           structure), include_highlight - include highlights of fields that
           matched query, ids_only - shortcut to mark both skips as true and
           include_highlight as false. add_narrative_info - if true,
           narrative info gets added to the search results. Default is false.
           add_access_group_info - if true, access groups and objects info
           get added to the search results. Default is false.) -> structure:
           parameter "ids_only" of type "boolean" (A boolean. 0 = false,
           other = true.), parameter "skip_keys" of type "boolean" (A
           boolean. 0 = false, other = true.), parameter "skip_data" of type
           "boolean" (A boolean. 0 = false, other = true.), parameter
           "include_highlight" of type "boolean" (A boolean. 0 = false, other
           = true.), parameter "add_narrative_info" of type "boolean" (A
           boolean. 0 = false, other = true.), parameter
           "add_access_group_info" of type "boolean" (A boolean. 0 = false,
           other = true.)
        :returns: instance of type "SearchObjectsOutput" (Output results for
           'search_objects' method. 'pagination' and 'sorting_rules' fields
           show actual input for pagination and sorting. total - total number
           of found objects. search_time - common time in milliseconds spent.
           mapping<access_group_id, narrative_info>
           access_group_narrative_info - information about the workspaces in
           which the objects in the results reside. This data only applies to
           workspace objects. mapping<access_group_id, access_group_info>
           access_groups_info - information about the access groups in which
           the objects in the results reside. Currently this data only
           applies to workspace objects. The tuple9 value returned by
           get_workspace_info() for each workspace in the search results is
           saved in this mapping. In future the access_group_info will be
           replaced with a higher level abstraction. mapping<obj_ref,
           object_info> objects_info - information about each object in the
           search results. Currently this data only applies to workspace
           objects. The tuple11 value returned by get_object_info3() for each
           object in the search results is saved in the mapping. In future
           the object_info will be replaced with a higher level abstraction.)
           -> structure: parameter "pagination" of type "Pagination"
           (Pagination rules. Default values are: start = 0, count = 50.) ->
           structure: parameter "start" of Long, parameter "count" of Long,
           parameter "sorting_rules" of list of type "SortingRule" (Rule for
           sorting results. string property - the property to sort on. This
           may be a an object property - e.g. a field inside the object - or
           a standard property possessed by all objects, like a timestamp or
           creator. boolean is_object_property - true (the default) to
           specify an object property, false to specify a standard property.
           boolean ascending - true (the default) to sort ascending, false to
           sort descending.) -> structure: parameter "property" of String,
           parameter "is_object_property" of type "boolean" (A boolean. 0 =
           false, other = true.), parameter "ascending" of type "boolean" (A
           boolean. 0 = false, other = true.), parameter "objects" of list of
           type "ObjectData" (Properties of an object including metadata, raw
           data and keywords. GUID guid - the object's guid. GUID parent_guid
           - the guid of the object's parent if the object is a subobject
           (e.g. features for genomes). object_name - the object's name.
           timestamp - the creation date for the object in milliseconds since
           the epoch. string type - the type of the data in the search index.
           int type_ver - the version of the search type. string creator -
           the username of the user that created that data. string copier -
           if this instance of the data is a copy, the username of the user
           that copied the data. string mod - the name of the KBase SDK
           module that was used to create the data. string method - the name
           of the method in the KBase SDK module that was used to create the
           data. string module_ver - the version of the KBase SDK module that
           was used to create the data. string commit - the version control
           commit hash of the KBase SDK module that was used to create the
           data. parent_data - raw data extracted from the subobject's parent
           object. The data contents will vary from object to object. Null if
           the object is not a subobject. data - raw data extracted from the
           object. The data contents will vary from object to object.
           key_props - keyword properties of the object. These fields have
           been extracted from the object and possibly transformed based on
           the search specification for the object. The contents will vary
           from object to object. mapping<string, list<string>> highlight -
           The keys are the field names and the list contains the sections in
           each field that matched the search query. Fields with no hits will
           not be available. Short fields that matched are shown in their
           entirety. Longer fields are shown as snippets preceded or followed
           by "...".) -> structure: parameter "guid" of type "GUID" (Global
           user identificator. It has structure like this:
           <data-source-code>:<full-reference>[:<sub-type>/<sub-id>]),
           parameter "parent_guid" of type "GUID" (Global user identificator.
           It has structure like this:
           <data-source-code>:<full-reference>[:<sub-type>/<sub-id>]),
           parameter "object_name" of String, parameter "timestamp" of Long,
           parameter "type" of String, parameter "type_ver" of Long,
           parameter "creator" of String, parameter "copier" of String,
           parameter "mod" of String, parameter "method" of String, parameter
           "module_ver" of String, parameter "commit" of String, parameter
           "parent_data" of unspecified object, parameter "data" of
           unspecified object, parameter "key_props" of mapping from String
           to String, parameter "highlight" of mapping from String to list of
           String, parameter "total" of Long, parameter "search_time" of
           Long, parameter "access_group_narrative_info" of mapping from type
           "access_group_id" (A data source access group ID (for instance,
           the integer ID of a workspace).) to type "narrative_info"
           (Information about a workspace, which may or may not contain a
           KBase Narrative. This data is specific for data from the Workspace
           Service. string narrative_name - the name of the narrative
           contained in the workspace, or null if the workspace does not
           contain a narrative. int narrative_id - the id of the narrative
           contained in the workspace, or null. timestamp time_last_saved -
           the modification date of the workspace. string ws_owner_username -
           the unique user name of the workspace's owner. string
           ws_owner_displayname - the display name of the workspace's owner.)
           -> tuple of size 5: parameter "narrative_name" of String,
           parameter "narrative_id" of Long, parameter "time_last_saved" of
           type "timestamp" (A timestamp in milliseconds since the epoch.),
           parameter "ws_owner_username" of String, parameter
           "ws_owner_displayname" of String, parameter "access_groups_info"
           of mapping from type "access_group_id" (A data source access group
           ID (for instance, the integer ID of a workspace).) to type
           "access_group_info" (The access_group_info and object_info are
           meant to be abstractions for info from multiple data sources.
           Until other data sources become available, definitions pertaining
           to Workspace are being used. When other data sources are
           available, the following variables will be moved from this
           concrete workspace definitions, to structures with higher level
           abstractions.) -> type "workspace_info" (Information about a
           workspace. ws_id id - the numerical ID of the workspace. ws_name
           workspace - name of the workspace. username owner - name of the
           user who owns (e.g. created) this workspace. timestamp moddate -
           date when the workspace was last modified. int max_objid - the
           maximum object ID appearing in this workspace. Since cloning a
           workspace preserves object IDs, this number may be greater than
           the number of objects in a newly cloned workspace. permission
           user_permission - permissions for the authenticated user of this
           workspace. permission globalread - whether this workspace is
           globally readable. lock_status lockstat - the status of the
           workspace lock. usermeta metadata - arbitrary user-supplied
           metadata about the workspace.) -> tuple of size 9: parameter "id"
           of type "ws_id" (The unique, permanent numerical ID of a
           workspace.), parameter "workspace" of type "ws_name" (A string
           used as a name for a workspace. Any string consisting of
           alphanumeric characters and "_", ".", or "-" that is not an
           integer is acceptable. The name may optionally be prefixed with
           the workspace owner's user name and a colon, e.g.
           kbasetest:my_workspace.), parameter "owner" of type "username"
           (Login name of a KBase user account.), parameter "moddate" of type
           "timestamp" (A time in the format YYYY-MM-DDThh:mm:ssZ, where Z is
           either the character Z (representing the UTC timezone) or the
           difference in time to UTC in the format +/-HHMM, eg:
           2012-12-17T23:24:06-0500 (EST time) 2013-04-03T08:56:32+0000 (UTC
           time) 2013-04-03T08:56:32Z (UTC time)), parameter "max_objid" of
           Long, parameter "user_permission" of type "permission" (Represents
           the permissions a user or users have to a workspace: 'a' -
           administrator. All operations allowed. 'w' - read/write. 'r' -
           read. 'n' - no permissions.), parameter "globalread" of type
           "permission" (Represents the permissions a user or users have to a
           workspace: 'a' - administrator. All operations allowed. 'w' -
           read/write. 'r' - read. 'n' - no permissions.), parameter
           "lockstat" of type "lock_status" (The lock status of a workspace.
           One of 'unlocked', 'locked', or 'published'.), parameter
           "metadata" of type "usermeta" (User provided metadata about an
           object. Arbitrary key-value pairs provided by the user.) ->
           mapping from String to String, parameter "objects_info" of mapping
           from type "obj_ref" (An X/Y/Z style reference) to type
           "object_info" -> type "object_info" (Information about an object,
           including user provided metadata. obj_id objid - the numerical id
           of the object. obj_name name - the name of the object. type_string
           type - the type of the object. timestamp save_date - the save date
           of the object. obj_ver ver - the version of the object. username
           saved_by - the user that saved or copied the object. ws_id wsid -
           the workspace containing the object. ws_name workspace - the
           workspace containing the object. string chsum - the md5 checksum
           of the object. int size - the size of the object in bytes.
           usermeta meta - arbitrary user-supplied metadata about the
           object.) -> tuple of size 11: parameter "objid" of type "obj_id"
           (The unique, permanent numerical ID of an object.), parameter
           "name" of type "obj_name" (A string used as a name for an object.
           Any string consisting of alphanumeric characters and the
           characters |._- that is not an integer is acceptable.), parameter
           "type" of type "type_string" (A type string. Specifies the type
           and its version in a single string in the format
           [module].[typename]-[major].[minor]: module - a string. The module
           name of the typespec containing the type. typename - a string. The
           name of the type as assigned by the typedef statement. major - an
           integer. The major version of the type. A change in the major
           version implies the type has changed in a non-backwards compatible
           way. minor - an integer. The minor version of the type. A change
           in the minor version implies that the type has changed in a way
           that is backwards compatible with previous type definitions. In
           many cases, the major and minor versions are optional, and if not
           provided the most recent version will be used. Example:
           MyModule.MyType-3.1), parameter "save_date" of type "timestamp" (A
           time in the format YYYY-MM-DDThh:mm:ssZ, where Z is either the
           character Z (representing the UTC timezone) or the difference in
           time to UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500
           (EST time) 2013-04-03T08:56:32+0000 (UTC time)
           2013-04-03T08:56:32Z (UTC time)), parameter "version" of Long,
           parameter "saved_by" of type "username" (Login name of a KBase
           user account.), parameter "wsid" of type "ws_id" (The unique,
           permanent numerical ID of a workspace.), parameter "workspace" of
           type "ws_name" (A string used as a name for a workspace. Any
           string consisting of alphanumeric characters and "_", ".", or "-"
           that is not an integer is acceptable. The name may optionally be
           prefixed with the workspace owner's user name and a colon, e.g.
           kbasetest:my_workspace.), parameter "chsum" of String, parameter
           "size" of Long, parameter "meta" of type "usermeta" (User provided
           metadata about an object. Arbitrary key-value pairs provided by
           the user.) -> mapping from String to String
        """
        return self._client.call_method(
            'KBaseSearchEngine.search_objects',
            [params], self._service_ver, context)

    def get_objects(self, params, context=None):
        """
        Retrieve objects by their GUIDs.
        :param params: instance of type "GetObjectsInput" (Input parameters
           for get_objects method. guids - list of guids post_processing -
           see PostProcessing (optional). match_filter - see MatchFilter
           (optional).) -> structure: parameter "guids" of list of type
           "GUID" (Global user identificator. It has structure like this:
           <data-source-code>:<full-reference>[:<sub-type>/<sub-id>]),
           parameter "post_processing" of type "PostProcessing" (Rules for
           what to return about found objects. skip_keys - do not include
           keyword values for object ('key_props' field in ObjectData
           structure), skip_data - do not include raw data for object ('data'
           and 'parent_data' fields in ObjectData structure),
           include_highlight - include highlights of fields that matched
           query, ids_only - shortcut to mark both skips as true and
           include_highlight as false. add_narrative_info - if true,
           narrative info gets added to the search results. Default is false.
           add_access_group_info - if true, access groups and objects info
           get added to the search results. Default is false.) -> structure:
           parameter "ids_only" of type "boolean" (A boolean. 0 = false,
           other = true.), parameter "skip_keys" of type "boolean" (A
           boolean. 0 = false, other = true.), parameter "skip_data" of type
           "boolean" (A boolean. 0 = false, other = true.), parameter
           "include_highlight" of type "boolean" (A boolean. 0 = false, other
           = true.), parameter "add_narrative_info" of type "boolean" (A
           boolean. 0 = false, other = true.), parameter
           "add_access_group_info" of type "boolean" (A boolean. 0 = false,
           other = true.), parameter "match_filter" of type "MatchFilter"
           (Optional rules of defining constrains for object properties
           including values of keywords or metadata/system properties (like
           object name, creation time range) or full-text search in all
           properties. boolean exclude_subobjects - don't return any
           subobjects in the search results if true. Default false.
           list<string> source_tags - source tags are arbitrary strings
           applied to data at the data source (for example, the workspace
           service). The source_tags list may optionally be populated with a
           set of tags that will determine what data is returned in a search.
           By default, the list behaves as a whitelist and only data with at
           least one of the tags will be returned. source_tags_blacklist - if
           true, the source_tags list behaves as a blacklist and any data
           with at least one of the tags will be excluded from the search
           results. If missing or false, the default behavior is maintained.)
           -> structure: parameter "full_text_in_all" of String, parameter
           "object_name" of String, parameter "timestamp" of type
           "MatchValue" (Optional rules of defining constraints for values of
           particular term (keyword). Appropriate field depends on type of
           keyword. For instance in case of integer type 'int_value' should
           be used. In case of range constraint rather than single value
           'min_*' and 'max_*' fields should be used. You may omit one of
           ends of range to achieve '<=' or '>=' comparison. Ends are always
           included for range constraints.) -> structure: parameter "value"
           of String, parameter "int_value" of Long, parameter "double_value"
           of Double, parameter "bool_value" of type "boolean" (A boolean. 0
           = false, other = true.), parameter "min_int" of Long, parameter
           "max_int" of Long, parameter "min_date" of Long, parameter
           "max_date" of Long, parameter "min_double" of Double, parameter
           "max_double" of Double, parameter "exclude_subobjects" of type
           "boolean" (A boolean. 0 = false, other = true.), parameter
           "lookup_in_keys" of mapping from String to type "MatchValue"
           (Optional rules of defining constraints for values of particular
           term (keyword). Appropriate field depends on type of keyword. For
           instance in case of integer type 'int_value' should be used. In
           case of range constraint rather than single value 'min_*' and
           'max_*' fields should be used. You may omit one of ends of range
           to achieve '<=' or '>=' comparison. Ends are always included for
           range constraints.) -> structure: parameter "value" of String,
           parameter "int_value" of Long, parameter "double_value" of Double,
           parameter "bool_value" of type "boolean" (A boolean. 0 = false,
           other = true.), parameter "min_int" of Long, parameter "max_int"
           of Long, parameter "min_date" of Long, parameter "max_date" of
           Long, parameter "min_double" of Double, parameter "max_double" of
           Double, parameter "source_tags" of list of String, parameter
           "source_tags_blacklist" of type "boolean" (A boolean. 0 = false,
           other = true.)
        :returns: instance of type "GetObjectsOutput" (Output results of
           get_objects method. mapping<access_group_id, narrative_info>
           access_group_narrative_info - information about the workspaces in
           which the objects in the results reside. This data only applies to
           workspace objects. mapping<access_group_id, access_group_info>
           access_groups_info - information about the access groups in which
           the objects in the results reside. Currently this data only
           applies to workspace objects. The tuple9 value returned by
           get_workspace_info() for each workspace in the search results is
           saved in this mapping. In future the access_group_info will be
           replaced with a higher level abstraction. mapping<obj_ref,
           object_info> objects_info - information about each object in the
           search results. Currently this data only applies to workspace
           objects. The tuple11 value returned by get_object_info3() for each
           object in the search results is saved in the mapping. In future
           the object_info will be replaced with a higher level abstraction.)
           -> structure: parameter "objects" of list of type "ObjectData"
           (Properties of an object including metadata, raw data and
           keywords. GUID guid - the object's guid. GUID parent_guid - the
           guid of the object's parent if the object is a subobject (e.g.
           features for genomes). object_name - the object's name. timestamp
           - the creation date for the object in milliseconds since the
           epoch. string type - the type of the data in the search index. int
           type_ver - the version of the search type. string creator - the
           username of the user that created that data. string copier - if
           this instance of the data is a copy, the username of the user that
           copied the data. string mod - the name of the KBase SDK module
           that was used to create the data. string method - the name of the
           method in the KBase SDK module that was used to create the data.
           string module_ver - the version of the KBase SDK module that was
           used to create the data. string commit - the version control
           commit hash of the KBase SDK module that was used to create the
           data. parent_data - raw data extracted from the subobject's parent
           object. The data contents will vary from object to object. Null if
           the object is not a subobject. data - raw data extracted from the
           object. The data contents will vary from object to object.
           key_props - keyword properties of the object. These fields have
           been extracted from the object and possibly transformed based on
           the search specification for the object. The contents will vary
           from object to object. mapping<string, list<string>> highlight -
           The keys are the field names and the list contains the sections in
           each field that matched the search query. Fields with no hits will
           not be available. Short fields that matched are shown in their
           entirety. Longer fields are shown as snippets preceded or followed
           by "...".) -> structure: parameter "guid" of type "GUID" (Global
           user identificator. It has structure like this:
           <data-source-code>:<full-reference>[:<sub-type>/<sub-id>]),
           parameter "parent_guid" of type "GUID" (Global user identificator.
           It has structure like this:
           <data-source-code>:<full-reference>[:<sub-type>/<sub-id>]),
           parameter "object_name" of String, parameter "timestamp" of Long,
           parameter "type" of String, parameter "type_ver" of Long,
           parameter "creator" of String, parameter "copier" of String,
           parameter "mod" of String, parameter "method" of String, parameter
           "module_ver" of String, parameter "commit" of String, parameter
           "parent_data" of unspecified object, parameter "data" of
           unspecified object, parameter "key_props" of mapping from String
           to String, parameter "highlight" of mapping from String to list of
           String, parameter "search_time" of Long, parameter
           "access_group_narrative_info" of mapping from type
           "access_group_id" (A data source access group ID (for instance,
           the integer ID of a workspace).) to type "narrative_info"
           (Information about a workspace, which may or may not contain a
           KBase Narrative. This data is specific for data from the Workspace
           Service. string narrative_name - the name of the narrative
           contained in the workspace, or null if the workspace does not
           contain a narrative. int narrative_id - the id of the narrative
           contained in the workspace, or null. timestamp time_last_saved -
           the modification date of the workspace. string ws_owner_username -
           the unique user name of the workspace's owner. string
           ws_owner_displayname - the display name of the workspace's owner.)
           -> tuple of size 5: parameter "narrative_name" of String,
           parameter "narrative_id" of Long, parameter "time_last_saved" of
           type "timestamp" (A timestamp in milliseconds since the epoch.),
           parameter "ws_owner_username" of String, parameter
           "ws_owner_displayname" of String, parameter "access_groups_info"
           of mapping from type "access_group_id" (A data source access group
           ID (for instance, the integer ID of a workspace).) to type
           "access_group_info" (The access_group_info and object_info are
           meant to be abstractions for info from multiple data sources.
           Until other data sources become available, definitions pertaining
           to Workspace are being used. When other data sources are
           available, the following variables will be moved from this
           concrete workspace definitions, to structures with higher level
           abstractions.) -> type "workspace_info" (Information about a
           workspace. ws_id id - the numerical ID of the workspace. ws_name
           workspace - name of the workspace. username owner - name of the
           user who owns (e.g. created) this workspace. timestamp moddate -
           date when the workspace was last modified. int max_objid - the
           maximum object ID appearing in this workspace. Since cloning a
           workspace preserves object IDs, this number may be greater than
           the number of objects in a newly cloned workspace. permission
           user_permission - permissions for the authenticated user of this
           workspace. permission globalread - whether this workspace is
           globally readable. lock_status lockstat - the status of the
           workspace lock. usermeta metadata - arbitrary user-supplied
           metadata about the workspace.) -> tuple of size 9: parameter "id"
           of type "ws_id" (The unique, permanent numerical ID of a
           workspace.), parameter "workspace" of type "ws_name" (A string
           used as a name for a workspace. Any string consisting of
           alphanumeric characters and "_", ".", or "-" that is not an
           integer is acceptable. The name may optionally be prefixed with
           the workspace owner's user name and a colon, e.g.
           kbasetest:my_workspace.), parameter "owner" of type "username"
           (Login name of a KBase user account.), parameter "moddate" of type
           "timestamp" (A time in the format YYYY-MM-DDThh:mm:ssZ, where Z is
           either the character Z (representing the UTC timezone) or the
           difference in time to UTC in the format +/-HHMM, eg:
           2012-12-17T23:24:06-0500 (EST time) 2013-04-03T08:56:32+0000 (UTC
           time) 2013-04-03T08:56:32Z (UTC time)), parameter "max_objid" of
           Long, parameter "user_permission" of type "permission" (Represents
           the permissions a user or users have to a workspace: 'a' -
           administrator. All operations allowed. 'w' - read/write. 'r' -
           read. 'n' - no permissions.), parameter "globalread" of type
           "permission" (Represents the permissions a user or users have to a
           workspace: 'a' - administrator. All operations allowed. 'w' -
           read/write. 'r' - read. 'n' - no permissions.), parameter
           "lockstat" of type "lock_status" (The lock status of a workspace.
           One of 'unlocked', 'locked', or 'published'.), parameter
           "metadata" of type "usermeta" (User provided metadata about an
           object. Arbitrary key-value pairs provided by the user.) ->
           mapping from String to String, parameter "objects_info" of mapping
           from type "obj_ref" (An X/Y/Z style reference) to type
           "object_info" (Information about an object, including user
           provided metadata. obj_id objid - the numerical id of the object.
           obj_name name - the name of the object. type_string type - the
           type of the object. timestamp save_date - the save date of the
           object. obj_ver ver - the version of the object. username saved_by
           - the user that saved or copied the object. ws_id wsid - the
           workspace containing the object. ws_name workspace - the workspace
           containing the object. string chsum - the md5 checksum of the
           object. int size - the size of the object in bytes. usermeta meta
           - arbitrary user-supplied metadata about the object.) -> tuple of
           size 11: parameter "objid" of type "obj_id" (The unique, permanent
           numerical ID of an object.), parameter "name" of type "obj_name"
           (A string used as a name for an object. Any string consisting of
           alphanumeric characters and the characters |._- that is not an
           integer is acceptable.), parameter "type" of type "type_string" (A
           type string. Specifies the type and its version in a single string
           in the format [module].[typename]-[major].[minor]: module - a
           string. The module name of the typespec containing the type.
           typename - a string. The name of the type as assigned by the
           typedef statement. major - an integer. The major version of the
           type. A change in the major version implies the type has changed
           in a non-backwards compatible way. minor - an integer. The minor
           version of the type. A change in the minor version implies that
           the type has changed in a way that is backwards compatible with
           previous type definitions. In many cases, the major and minor
           versions are optional, and if not provided the most recent version
           will be used. Example: MyModule.MyType-3.1), parameter "save_date"
           of type "timestamp" (A time in the format YYYY-MM-DDThh:mm:ssZ,
           where Z is either the character Z (representing the UTC timezone)
           or the difference in time to UTC in the format +/-HHMM, eg:
           2012-12-17T23:24:06-0500 (EST time) 2013-04-03T08:56:32+0000 (UTC
           time) 2013-04-03T08:56:32Z (UTC time)), parameter "version" of
           Long, parameter "saved_by" of type "username" (Login name of a
           KBase user account.), parameter "wsid" of type "ws_id" (The
           unique, permanent numerical ID of a workspace.), parameter
           "workspace" of type "ws_name" (A string used as a name for a
           workspace. Any string consisting of alphanumeric characters and
           "_", ".", or "-" that is not an integer is acceptable. The name
           may optionally be prefixed with the workspace owner's user name
           and a colon, e.g. kbasetest:my_workspace.), parameter "chsum" of
           String, parameter "size" of Long, parameter "meta" of type
           "usermeta" (User provided metadata about an object. Arbitrary
           key-value pairs provided by the user.) -> mapping from String to
           String
        """
        return self._client.call_method(
            'KBaseSearchEngine.get_objects',
            [params], self._service_ver, context)

    def list_types(self, params, context=None):
        """
        List registered searchable object types.
        :param params: instance of type "ListTypesInput" (Input parameters
           for list_types method. type_name - optional parameter; if not
           specified all types are described.) -> structure: parameter
           "type_name" of String
        :returns: instance of type "ListTypesOutput" (Output results of
           list_types method.) -> structure: parameter "types" of mapping
           from String to type "TypeDescriptor" (Description of searchable
           object type including details about keywords. TODO: add more
           details like parent type, primary key, ...) -> structure:
           parameter "type_name" of String, parameter "type_ui_title" of
           String, parameter "keys" of list of type "KeyDescription"
           (Description of searchable type keyword. - key_value_type can be
           one of {'string', 'integer', 'double', 'boolean'}, - hidden - if
           true then this keyword provides values for other keywords (like in
           'link_key') and is not supposed to be shown. - link_key - optional
           field pointing to another keyword (which is often hidden)
           providing GUID to build external URL to.) -> structure: parameter
           "key_name" of String, parameter "key_ui_title" of String,
           parameter "key_value_type" of String, parameter "hidden" of type
           "boolean" (A boolean. 0 = false, other = true.), parameter
           "link_key" of String
        """
        return self._client.call_method(
            'KBaseSearchEngine.list_types',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('KBaseSearchEngine.status',
                                        [], self._service_ver, context)
